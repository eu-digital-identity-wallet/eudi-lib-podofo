name: Build PoDoFo for Android

on:
  push:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
    inputs:
      brotli_version:
        description: "brotli version"
        required: true
        default: "1.0.9"
      bzip2_version:
        description: "bzip2 version"
        required: true
        default: "1.0.8"
      freetype_version:
        description: "freetype version"
        required: true
        default: "2.13.2"
      libpng_version:
        description: "libpng version"
        required: true
        default: "1.6.43"
      libxml2_version:
        description: "libxml2 version"
        required: true
        default: "2.12.3"
      openssl_version:
        description: "openssl version"
        required: true
        default: "3.2.4"
      harfbuzz_version:
        description: "harfbuzz version"
        required: true
        default: "11.2.1"
      zlib_version:
        description: "zlib version"
        required: true
        default: "1.2.13"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-android-brotli:
    runs-on: ubuntu-latest
    env:
      BROTLI_VERSION: ${{ github.event.inputs.brotli_version || '1.0.9' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache brotli build
        id: cache-android-brotli
        uses: actions/cache@v4
        with:
          path: build/android/brotli/install
          key: deps-android-brotli-${{ env.BROTLI_VERSION }}

      - name: Checkout brotli source code
        uses: actions/checkout@v4
        with:
          repository: google/brotli
          ref: refs/tags/v${{ env.BROTLI_VERSION }}
          path: build/android/brotli/build/brotli-${{ env.BROTLI_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install CMake
        if: steps.cache-android-brotli.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install -y cmake

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        if: steps.cache-android-brotli.outputs.cache-hit != 'true'
        id: setup-ndk
        with:
          ndk-version: r27c
          local-cache: true

      - name: Build from source
        if: steps.cache-android-brotli.outputs.cache-hit != 'true'
        run: |
          chmod +x scripts/android/brotli/build.sh
          ./scripts/android/brotli/build.sh ${{ steps.setup-ndk.outputs.ndk-path }} build/android/brotli ${{ env.BROTLI_VERSION }} --skip-prepare
        env:
          NDK_DIR: ${{ steps.setup-ndk.outputs.ndk-path }}
          BROTLI_VERSION: ${{ env.BROTLI_VERSION }}

      - name: Upload brotli artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-android-brotli
          path: build/android/brotli/install
          overwrite: true

  build-android-bzip2:
    runs-on: ubuntu-latest
    env:
      BZIP2_VERSION: ${{ github.event.inputs.bzip2_version || '1.0.8' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache bzip2 build
        id: cache-android-bzip2
        uses: actions/cache@v4
        with:
          path: build/android/bzip2/install
          key: deps-android-bzip2-${{ env.BZIP2_VERSION }}

      - name: Download and extract bzip2
        if: steps.cache-android-bzip2.outputs.cache-hit != 'true'
        run: |
          mkdir -p build/android/bzip2/download/ build/android/bzip2/build/
          curl -L https://sourceware.org/pub/bzip2/bzip2-${{ env.BZIP2_VERSION }}.tar.gz -o build/android/bzip2/download/bzip2-${{ env.BZIP2_VERSION }}.tar.gz
          tar -xzf build/android/bzip2/download/bzip2-${{ env.BZIP2_VERSION }}.tar.gz -C build/android/bzip2/build/

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        if: steps.cache-android-bzip2.outputs.cache-hit != 'true'
        id: setup-ndk
        with:
          ndk-version: r27c
          local-cache: true

      - name: Build from source
        if: steps.cache-android-bzip2.outputs.cache-hit != 'true'
        run: |
          chmod +x scripts/android/bzip2/build.sh
          ./scripts/android/bzip2/build.sh ${{ steps.setup-ndk.outputs.ndk-path }} build/android/bzip2 ${{ env.BZIP2_VERSION }} --skip-prepare
        env:
          NDK_DIR: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Upload bzip2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-android-bzip2
          path: build/android/bzip2/install
          overwrite: true

  build-android-freetype:
    runs-on: ubuntu-latest
    needs: [build-android-brotli, build-android-bzip2]
    env:
      BZIP2_VERSION: ${{ github.event.inputs.bzip2_version || '1.0.8' }}
      BROTLI_VERSION: ${{ github.event.inputs.brotli_version || '1.0.9' }}
      FREETYPE_VERSION: ${{ github.event.inputs.freetype_version || '2.13.2' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache freetype build
        id: cache-android-freetype
        uses: actions/cache@v4
        with:
          path: build/android/freetype/install
          key: deps-android-freetype-${{ env.FREETYPE_VERSION }}

      - name: Download and extract freetype
        if: steps.cache-android-freetype.outputs.cache-hit != 'true'
        run: |
          mkdir -p build/android/freetype/download/ build/android/freetype/build/
          curl -L https://download.savannah.gnu.org/releases/freetype/freetype-${{ env.FREETYPE_VERSION }}.tar.gz -o build/android/freetype/download/freetype-${{ env.FREETYPE_VERSION }}.tar.gz
          tar xzf build/android/freetype/download/freetype-${{ env.FREETYPE_VERSION }}.tar.gz -C build/android/freetype/build/

      - uses: actions/download-artifact@v4
        if: steps.cache-android-freetype.outputs.cache-hit != 'true'
        id: deps-brotli
        with:
          name: deps-android-brotli
          path: build/android/brotli/build/brotli-${{ env.BROTLI_VERSION }}

      - uses: actions/download-artifact@v4
        if: steps.cache-android-freetype.outputs.cache-hit != 'true'
        id: deps-bzip2
        with:
          name: deps-android-bzip2
          path: build/android/bzip2/build/bzip2-${{ env.BZIP2_VERSION }}

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        if: steps.cache-android-freetype.outputs.cache-hit != 'true'
        id: setup-ndk
        with:
          ndk-version: r27c
          local-cache: true

      - name: Build from source
        if: steps.cache-android-freetype.outputs.cache-hit != 'true'
        run: |
          chmod +x scripts/android/freetype/build.sh
          ./scripts/android/freetype/build.sh ${{ steps.setup-ndk.outputs.ndk-path }} build/android/freetype ${{ env.FREETYPE_VERSION }} ${{ steps.deps-bzip2.outputs.download-path }} ${{ steps.deps-brotli.outputs.download-path }} --skip-prepare
        env:
          NDK_DIR: ${{ steps.setup-ndk.outputs.ndk-path }}
          FREETYPE_VERSION: ${{ env.FREETYPE_VERSION }}

      - name: Upload freetype artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-android-freetype
          path: build/android/freetype/install
          overwrite: true

  build-android-libpng:
    runs-on: ubuntu-latest
    env:
      LIBPNG_VERSION: ${{ github.event.inputs.libpng_version || '1.6.43' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache libpng build
        id: cache-android-libpng
        uses: actions/cache@v4
        with:
          path: build/android/libpng/install
          key: deps-android-libpng-${{ env.LIBPNG_VERSION }}

      - name: Download and extract libpng
        if: steps.cache-android-libpng.outputs.cache-hit != 'true'
        run: |
          mkdir -p build/android/libpng/download/ build/android/libpng/build/
          curl -L https://downloads.sourceforge.net/project/libpng/libpng16/${{ env.LIBPNG_VERSION }}/libpng-${{ env.LIBPNG_VERSION }}.tar.gz -o build/android/libpng/download/libpng-${{ env.LIBPNG_VERSION }}.tar.gz
          tar -xzf build/android/libpng/download/libpng-${{ env.LIBPNG_VERSION }}.tar.gz -C build/android/libpng/build/

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        if: steps.cache-android-libpng.outputs.cache-hit != 'true'
        id: setup-ndk
        with:
          ndk-version: r27c
          local-cache: true

      - name: Build from source
        if: steps.cache-android-libpng.outputs.cache-hit != 'true'
        run: |
          chmod +x scripts/android/libpng/build.sh
          ./scripts/android/libpng/build.sh ${{ steps.setup-ndk.outputs.ndk-path }} build/android/libpng ${{ env.LIBPNG_VERSION }} --skip-prepare
        env:
          NDK_DIR: ${{ steps.setup-ndk.outputs.ndk-path }}
          LIBPNG_VERSION: ${{ env.LIBPNG_VERSION }}

      - name: Upload libpng artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-android-libpng
          path: build/android/libpng/install
          overwrite: true

  build-android-libxml2:
    runs-on: ubuntu-latest
    env:
      LIBXML2_VERSION: ${{ github.event.inputs.libxml2_version || '2.12.3'}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache libxml2 build
        id: cache-android-libxml2
        uses: actions/cache@v4
        with:
          path: build/android/libxml2/install
          key: deps-android-libxml2-${{ env.LIBXML2_VERSION }}

      - name: Checkout libxml2 source code
        uses: actions/checkout@v4
        if: steps.cache-android-libxml2.outputs.cache-hit != 'true'
        with:
          repository: GNOME/libxml2
          ref: refs/tags/v${{ env.LIBXML2_VERSION }}
          path: build/android/libxml2/build/libxml2-${{ env.LIBXML2_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        if: steps.cache-android-libxml2.outputs.cache-hit != 'true'
        id: setup-ndk
        with:
          ndk-version: r27c
          local-cache: true

      - name: Build from source
        if: steps.cache-android-libxml2.outputs.cache-hit != 'true'
        run: |
          chmod +x scripts/android/libxml2/build.sh
          ./scripts/android/libxml2/build.sh ${{ steps.setup-ndk.outputs.ndk-path }} build/android/libxml2 ${{ env.LIBXML2_VERSION }} --skip-prepare
        env:
          NDK_DIR: ${{ steps.setup-ndk.outputs.ndk-path }}
          LIBXML2_VERSION: ${{ env.LIBXML2_VERSION }}

      - name: Upload libxml2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-android-libxml2
          path: build/android/libxml2/install
          overwrite: true

  build-android-openssl:
    runs-on: ubuntu-latest
    env:
      OPENSSL_VERSION: ${{ github.event.inputs.openssl_version || '3.2.4' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache openssl build
        id: cache-android-openssl
        uses: actions/cache@v4
        with:
          path: build/android/openssl/install
          key: deps-android-openssl-${{ env.OPENSSL_VERSION }}

      - name: Download and extract openssl
        if: steps.cache-android-openssl.outputs.cache-hit != 'true'
        run: |
          mkdir -p build/android/openssl/download/ build/android/openssl/build/
          curl -L https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz -o build/android/openssl/download/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          tar xzf build/android/openssl/download/openssl-${{ env.OPENSSL_VERSION }}.tar.gz -C build/android/openssl/build/

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        if: steps.cache-android-openssl.outputs.cache-hit != 'true'
        id: setup-ndk
        with:
          ndk-version: r27c
          local-cache: true

      - name: Build from source
        if: steps.cache-android-openssl.outputs.cache-hit != 'true'
        run: |
          chmod +x scripts/android/openssl/build.sh
          ./scripts/android/openssl/build.sh ${{ steps.setup-ndk.outputs.ndk-path }} build/android/openssl ${{ env.OPENSSL_VERSION }} --skip-prepare
        env:
          NDK_DIR: ${{ steps.setup-ndk.outputs.ndk-path }}
          OPENSSL_VERSION: ${{ env.OPENSSL_VERSION }}

      - name: Upload openssl artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-android-openssl
          path: build/android/openssl/install
          overwrite: true

  build-android-harfbuzz:
    runs-on: ubuntu-latest
    env:
      HARFBUZZ_VERSION: ${{ github.event.inputs.harfbuzz_version || '11.2.1' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache harfbuzz build
        id: cache-android-harfbuzz
        uses: actions/cache@v4
        with:
          path: build/android/harfbuzz/install
          key: deps-android-harfbuzz-${{ env.HARFBUZZ_VERSION }}

      - name: Install CMake
        if: steps.cache-android-harfbuzz.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install -y cmake

      - name: Checkout harfbuzz source code
        uses: actions/checkout@v4
        with:
          repository: harfbuzz/harfbuzz
          ref: refs/tags/${{ env.HARFBUZZ_VERSION }}
          path: build/android/harfbuzz/build/harfbuzz
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        if: steps.cache-android-harfbuzz.outputs.cache-hit != 'true'
        id: setup-ndk
        with:
          ndk-version: r27c
          local-cache: true

      - name: Build from source
        if: steps.cache-android-harfbuzz.outputs.cache-hit != 'true'
        run: |
          chmod +x scripts/android/harfbuzz/build.sh
          ./scripts/android/harfbuzz/build.sh ${{ steps.setup-ndk.outputs.ndk-path }} build/android/harfbuzz ${{ env.HARFBUZZ_VERSION }} --skip-prepare
        env:
          NDK_DIR: ${{ steps.setup-ndk.outputs.ndk-path }}
          HARFBUZZ_VERSION: ${{ env.HARFBUZZ_VERSION }}

      - name: Upload harfbuzz artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-android-harfbuzz
          path: build/android/harfbuzz/install
          overwrite: true

  build-android-zlib:
    runs-on: ubuntu-latest
    env:
      ZLIB_VERSION: ${{ github.event.inputs.zlib_version || '1.2.13' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache zlib build
        id: cache-android-zlib
        uses: actions/cache@v4
        with:
          path: build/android/zlib/install
          key: deps-android-zlib-${{ env.ZLIB_VERSION }}

      - name: Checkout zlib source code
        uses: actions/checkout@v4
        with:
          repository: madler/zlib
          ref: refs/tags/v${{ env.ZLIB_VERSION }}
          path: build/android/zlib/build/zlib-${{ env.ZLIB_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        if: steps.cache-android-zlib.outputs.cache-hit != 'true'
        id: setup-ndk
        with:
          ndk-version: r27c
          local-cache: true

      - name: Build from source
        if: steps.cache-android-zlib.outputs.cache-hit != 'true'
        run: |
          chmod +x scripts/android/zlib/build.sh
          ./scripts/android/zlib/build.sh ${{ steps.setup-ndk.outputs.ndk-path }} build/android/zlib ${{ env.ZLIB_VERSION }} --skip-prepare
        env:
          NDK_DIR: ${{ steps.setup-ndk.outputs.ndk-path }}
          ZLIB_VERSION: ${{ env.ZLIB_VERSION }}

      - name: Upload zlib artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-android-zlib
          path: build/android/zlib/install
          overwrite: true

  build-android-podofo:
    runs-on: ubuntu-latest
    needs:
      [
        build-android-freetype,
        build-android-libpng,
        build-android-libxml2,
        build-android-openssl,
        build-android-harfbuzz,
        build-android-zlib,
      ]

    strategy:
      matrix:
        arch: ["arm64-v8a", "armeabi-v7a", "x86", "x86_64"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download freetype artifact
        uses: actions/download-artifact@v4
        id: deps-android-freetype
        with:
          name: deps-android-freetype
          path: deps-android/freetype

      - name: Download libpng artifact
        uses: actions/download-artifact@v4
        id: deps-android-libpng
        with:
          name: deps-android-libpng
          path: deps-android/libpng

      - name: Download libxml2 artifact
        uses: actions/download-artifact@v4
        id: deps-android-libxml2
        with:
          name: deps-android-libxml2
          path: deps-android/libxml2

      - name: Download openssl artifact
        uses: actions/download-artifact@v4
        id: deps-android-openssl
        with:
          name: deps-android-openssl
          path: deps-android/openssl

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27c
          local-cache: true

      - name: Install CMake
        run: sudo apt-get update && sudo apt-get install -y cmake rsync

      - name: Build from source
        run: |
          chmod +x scripts/android/podofo/build.sh
          mkdir -p build/android/podofo
          ./scripts/android/podofo/build.sh ${{ steps.setup-ndk.outputs.ndk-path }} build/android/podofo ${{ steps.deps-android-freetype.outputs.download-path }} ${{ steps.deps-android-libpng.outputs.download-path }} ${{ steps.deps-android-libxml2.outputs.download-path }} ${{ steps.deps-android-openssl.outputs.download-path }} ${{ matrix.arch }}
        env:
          NDK_DIR: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Upload podofo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-android-podofo-${{ matrix.arch }}
          path: build/android/podofo/install
          overwrite: true

  publish-android-podofo-aar:
    runs-on: ubuntu-latest
    needs: build-android-podofo

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        id: deps-android-brotli
        with:
          name: deps-android-brotli
          path: deps-android/brotli

      - uses: actions/download-artifact@v4
        id: deps-android-bzip2
        with:
          name: deps-android-bzip2
          path: deps-android/bzip2

      - name: Download freetype artifact
        uses: actions/download-artifact@v4
        id: deps-android-freetype
        with:
          name: deps-android-freetype
          path: deps-android/freetype

      - name: Download harfbuzz artifact
        uses: actions/download-artifact@v4
        id: deps-android-harfbuzz
        with:
          name: deps-android-harfbuzz
          path: deps-android/harfbuzz

      - name: Download libpng artifact
        uses: actions/download-artifact@v4
        id: deps-android-libpng
        with:
          name: deps-android-libpng
          path: deps-android/libpng

      - name: Download libxml2 artifact
        uses: actions/download-artifact@v4
        id: deps-android-libxml2
        with:
          name: deps-android-libxml2
          path: deps-android/libxml2

      - name: Download openssl artifact
        uses: actions/download-artifact@v4
        id: deps-android-openssl
        with:
          name: deps-android-openssl
          path: deps-android/openssl

      - name: Download zlib artifact
        uses: actions/download-artifact@v4
        id: deps-android-zlib
        with:
          name: deps-android-zlib
          path: deps-android/zlib

      - name: Download podofo artifact
        uses: actions/download-artifact@v4
        id: deps-android-podofo
        with:
          name: deps-android-podofo-*
          merge-multiple: true
          path: deps-android/podofo

      - name: Organize libs
        run: |
          chmod +x scripts/android/podofo-aar/build.sh
          mkdir -p build/android/aar
          ./scripts/android/podofo-aar/organize_libs.sh ${{ steps.deps-android-brotli.outputs.download-path }} ${{ steps.deps-android-bzip2.outputs.download-path }} ${{ steps.deps-android-freetype.outputs.download-path }} ${{ steps.deps-android-harfbuzz.outputs.download-path }} ${{ steps.deps-android-libpng.outputs.download-path }} ${{ steps.deps-android-libxml2.outputs.download-path }} ${{ steps.deps-android-openssl.outputs.download-path }} ${{ steps.deps-android-podofo.outputs.download-path }} ${{ steps.deps-android-zlib.outputs.download-path }} build/android/aar
      
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27c
          local-cache: true

      - name: Build JNI libs
        run: |
          chmod +x scripts/android/podofo-aar/build.sh
          ./scripts/android/podofo-aar/build.sh ${{ steps.setup-ndk.outputs.ndk-path }} src/wrapper build/android/aar
          mkdir -p src/android/src/main/jniLibs
          cp -r build/android/aar/build/jni/* src/android/src/main/jniLibs/
        env:
          NDK_DIR: ${{ steps.setup-ndk.outputs.ndk-path }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Build with Gradle Wrapper
        run: |
          cd src/android
          ./gradlew --no-daemon build

      - id: extract
        name: Extract code version from gradle.properties
        run: echo "code-version=$(awk -F= '$1~/version/{print $2}' src/android/gradle.properties)" >> $GITHUB_OUTPUT

      - name: Upload podofo AAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-podofo-aar
          path: src/android/build/outputs/aar/eudi-lib-android-podofo-*.aar
          overwrite: true
      
      - name: Publish to Sonatype
        if: github.repository_owner == 'eu-digital-identity-wallet' && github.event_name != 'pull_request' && endsWith(steps.extract.outputs.code-version, 'SNAPSHOT') && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release'))
        run: |
          cd src/android
          ./gradlew publishAllPublicationsToMavenCentral --full-stacktrace
        env:
          CI: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.OSSRH_GPG_KEY_ID }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.OSSRH_GPG_PASSPHRASE }}
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.OSSRH_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.OSSRH_PASSWORD }}
          GIT_REF_NAME: ${{ github.ref_name }}

        
